[manifest]
version = "1.0.0"
dump_lua = true
priority = 420

[[patches]]
[patches.module]
source = "libs/nativefs.lua"
before = "main.lua"
name = "blueprint.nfs"

[[patches]]
[patches.module]
source = "internal/init.lua"
before = "main.lua"
name = "blueprint.init"

# Add core functionality
[[patches]]
[patches.copy]
target = "main.lua"
position = "append"
sources = [
    "blueprint.lua",
]

# Localization
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "boot_timer('prep stage', 'splash prep',1)"
position = "before"
payload = '''
Blueprint.load_mod_file('internal/localization.lua', 'internal.localization')
'''
match_indent = true

# 
# Patch base game functions to allow blueprint shader to work
# 
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
local shader_files = love.filesystem.getDirectoryItems("resources/shaders")'''
position = "before"
payload = '''
Blueprint.load_shaders()
'''
match_indent = true

# Test for joker menu
#[[patches]]
#[patches.pattern]
#target = "functions/UI_definitions.lua"
#pattern = '''
#function G.UIDEF.card_focus_ui(card)'''
#position = "after"
#payload = '''
#    local name = "I dunno"
#    if card.config and card.config.center then
#        name = card.config.center.key
#    end
#    Blueprint.log("hi hello im " .. tostring(name).. ". highlighed: "..tostring(card.highlighted))
#'''
#match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
elseif self.sprite_facing == 'back' then'''
position = "before"
payload = '''
    if self.blueprint_sprite_copy and self.children.floating_sprite then
        local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
        local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2

        if self.blueprint_copy_key == 'j_hologram' then
            self.hover_tilt = self.hover_tilt*1.5
            self.children.floating_sprite:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 2*scale_mod, 2*rotate_mod)
            self.hover_tilt = self.hover_tilt/1.5
        else
            self.children.floating_sprite:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod,nil, 0.1 + 0.03*math.sin(1.8*G.TIMERS.REAL),nil, 0.6)
            self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod)
        end
        --self.children.floating_sprite:draw_shader('dissolve',   0, nil, nil, self.children.center, scale_mod, rotate_mod, nil, 0.1 + 0.03 * math.sin(1.8 * G.TIMERS.REAL), nil, 0.6)
        --self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod)
    end
'''
match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# G.shared_shadow = self.sprite_facing == 'front' and self.children.center or self.children.back'''
# position = "before"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite.role.draw_major = self
# end'''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# G.shared_shadow:draw_shader('dissolve', self.shadow_height)'''
# position = "at"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite.role.draw_major = self
#     Blueprint.brainstorm_sprite.ARGS.draw_from_offset = nil
#     local other_obj = self.children.center
#     -- shadow_height doesn't work when drawing sprite from other_obj, so we have to add offsets manually
#     local scale = other_obj.VT.scale*0.2*self.shadow_height
#     local rotation = nil
#     local dx = - other_obj.shadow_parrallax.x*self.shadow_height
#     local dy = - other_obj.shadow_parrallax.y*self.shadow_height

#     Blueprint.brainstorm_sprite:draw_shader('dissolve', self.shadow_height, nil, nil, other_obj, scale, rotation, dx, dy)
# else
#     G.shared_shadow:draw_shader('dissolve', self.shadow_height)
# end
# '''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# self.children.center:draw_shader('dissolve')'''
# position = "before"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center)
# end
# '''
# match_indent = true

# [[patches]]
# [patches.regex]
# target = "card.lua"
# pattern = '''
# (?<indent>[ \t]*)self\.children\.center:draw_shader\((?<args_center>[^\n]*)\)
# [ \t]*if self\.children\.front(?<then>[^\n]*)
# [ \t]*    self\.children\.front:draw_shader(?<args_front>[^\n]*)
# [ \t]*end'''
# position = "before"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite:draw_shader($args_center, nil, self.children.center)
# end
# '''
# line_prepend = '$indent'



